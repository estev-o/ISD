/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package es.udc.ws.app.thrift;

@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.19.0)", date = "2025-01-24")
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class ThriftCourseService {

  public interface Iface {

    public ThriftCourseDto findCourseById(long courseId) throws ThriftInstanceNotFoundException, org.apache.thrift.TException;

    public long enrollInCourse(long courseId, java.lang.String userEmail, java.lang.String creditCardNumber) throws ThriftInputValidationException, ThriftLateCancellationException, ThriftEnrollmentAlreadyCancelledException, ThriftUserMismatchException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findCourseById(long courseId, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException;

    public void enrollInCourse(long courseId, java.lang.String userEmail, java.lang.String creditCardNumber, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      @Override
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    @Override
    public ThriftCourseDto findCourseById(long courseId) throws ThriftInstanceNotFoundException, org.apache.thrift.TException
    {
      send_findCourseById(courseId);
      return recv_findCourseById();
    }

    public void send_findCourseById(long courseId) throws org.apache.thrift.TException
    {
      findCourseById_args args = new findCourseById_args();
      args.setCourseId(courseId);
      sendBase("findCourseById", args);
    }

    public ThriftCourseDto recv_findCourseById() throws ThriftInstanceNotFoundException, org.apache.thrift.TException
    {
      findCourseById_result result = new findCourseById_result();
      receiveBase(result, "findCourseById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findCourseById failed: unknown result");
    }

    @Override
    public long enrollInCourse(long courseId, java.lang.String userEmail, java.lang.String creditCardNumber) throws ThriftInputValidationException, ThriftLateCancellationException, ThriftEnrollmentAlreadyCancelledException, ThriftUserMismatchException, org.apache.thrift.TException
    {
      send_enrollInCourse(courseId, userEmail, creditCardNumber);
      return recv_enrollInCourse();
    }

    public void send_enrollInCourse(long courseId, java.lang.String userEmail, java.lang.String creditCardNumber) throws org.apache.thrift.TException
    {
      enrollInCourse_args args = new enrollInCourse_args();
      args.setCourseId(courseId);
      args.setUserEmail(userEmail);
      args.setCreditCardNumber(creditCardNumber);
      sendBase("enrollInCourse", args);
    }

    public long recv_enrollInCourse() throws ThriftInputValidationException, ThriftLateCancellationException, ThriftEnrollmentAlreadyCancelledException, ThriftUserMismatchException, org.apache.thrift.TException
    {
      enrollInCourse_result result = new enrollInCourse_result();
      receiveBase(result, "enrollInCourse");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e1 != null) {
        throw result.e1;
      }
      if (result.e2 != null) {
        throw result.e2;
      }
      if (result.e3 != null) {
        throw result.e3;
      }
      if (result.e4 != null) {
        throw result.e4;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "enrollInCourse failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
    @Override
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    @Override
    public void findCourseById(long courseId, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findCourseById_call method_call = new findCourseById_call(courseId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findCourseById_call extends org.apache.thrift.async.TAsyncMethodCall<ThriftCourseDto> {
      private long courseId;
      public findCourseById_call(long courseId, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseId = courseId;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findCourseById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findCourseById_args args = new findCourseById_args();
        args.setCourseId(courseId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public ThriftCourseDto getResult() throws ThriftInstanceNotFoundException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findCourseById();
      }
    }

    @Override
    public void enrollInCourse(long courseId, java.lang.String userEmail, java.lang.String creditCardNumber, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      enrollInCourse_call method_call = new enrollInCourse_call(courseId, userEmail, creditCardNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class enrollInCourse_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private long courseId;
      private java.lang.String userEmail;
      private java.lang.String creditCardNumber;
      public enrollInCourse_call(long courseId, java.lang.String userEmail, java.lang.String creditCardNumber, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.courseId = courseId;
        this.userEmail = userEmail;
        this.creditCardNumber = creditCardNumber;
      }

      @Override
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("enrollInCourse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        enrollInCourse_args args = new enrollInCourse_args();
        args.setCourseId(courseId);
        args.setUserEmail(userEmail);
        args.setCreditCardNumber(creditCardNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      @Override
      public java.lang.Long getResult() throws ThriftInputValidationException, ThriftLateCancellationException, ThriftEnrollmentAlreadyCancelledException, ThriftUserMismatchException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_enrollInCourse();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findCourseById", new findCourseById());
      processMap.put("enrollInCourse", new enrollInCourse());
      return processMap;
    }

    public static class findCourseById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findCourseById_args> {
      public findCourseById() {
        super("findCourseById");
      }

      @Override
      public findCourseById_args getEmptyArgsInstance() {
        return new findCourseById_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public findCourseById_result getResult(I iface, findCourseById_args args) throws org.apache.thrift.TException {
        findCourseById_result result = new findCourseById_result();
        try {
          result.success = iface.findCourseById(args.courseId);
        } catch (ThriftInstanceNotFoundException e1) {
          result.e1 = e1;
        }
        return result;
      }
    }

    public static class enrollInCourse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, enrollInCourse_args> {
      public enrollInCourse() {
        super("enrollInCourse");
      }

      @Override
      public enrollInCourse_args getEmptyArgsInstance() {
        return new enrollInCourse_args();
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      @Override
      public enrollInCourse_result getResult(I iface, enrollInCourse_args args) throws org.apache.thrift.TException {
        enrollInCourse_result result = new enrollInCourse_result();
        try {
          result.success = iface.enrollInCourse(args.courseId, args.userEmail, args.creditCardNumber);
          result.setSuccessIsSet(true);
        } catch (ThriftInputValidationException e1) {
          result.e1 = e1;
        } catch (ThriftLateCancellationException e2) {
          result.e2 = e2;
        } catch (ThriftEnrollmentAlreadyCancelledException e3) {
          result.e3 = e3;
        } catch (ThriftUserMismatchException e4) {
          result.e4 = e4;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findCourseById", new findCourseById());
      processMap.put("enrollInCourse", new enrollInCourse());
      return processMap;
    }

    public static class findCourseById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findCourseById_args, ThriftCourseDto> {
      public findCourseById() {
        super("findCourseById");
      }

      @Override
      public findCourseById_args getEmptyArgsInstance() {
        return new findCourseById_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto>() { 
          @Override
          public void onComplete(ThriftCourseDto o) {
            findCourseById_result result = new findCourseById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            findCourseById_result result = new findCourseById_result();
            if (e instanceof ThriftInstanceNotFoundException) {
              result.e1 = (ThriftInstanceNotFoundException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, findCourseById_args args, org.apache.thrift.async.AsyncMethodCallback<ThriftCourseDto> resultHandler) throws org.apache.thrift.TException {
        iface.findCourseById(args.courseId,resultHandler);
      }
    }

    public static class enrollInCourse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, enrollInCourse_args, java.lang.Long> {
      public enrollInCourse() {
        super("enrollInCourse");
      }

      @Override
      public enrollInCourse_args getEmptyArgsInstance() {
        return new enrollInCourse_args();
      }

      @Override
      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          @Override
          public void onComplete(java.lang.Long o) {
            enrollInCourse_result result = new enrollInCourse_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          @Override
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            enrollInCourse_result result = new enrollInCourse_result();
            if (e instanceof ThriftInputValidationException) {
              result.e1 = (ThriftInputValidationException) e;
              result.setE1IsSet(true);
              msg = result;
            } else if (e instanceof ThriftLateCancellationException) {
              result.e2 = (ThriftLateCancellationException) e;
              result.setE2IsSet(true);
              msg = result;
            } else if (e instanceof ThriftEnrollmentAlreadyCancelledException) {
              result.e3 = (ThriftEnrollmentAlreadyCancelledException) e;
              result.setE3IsSet(true);
              msg = result;
            } else if (e instanceof ThriftUserMismatchException) {
              result.e4 = (ThriftUserMismatchException) e;
              result.setE4IsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      @Override
      protected boolean isOneway() {
        return false;
      }

      @Override
      public void start(I iface, enrollInCourse_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.enrollInCourse(args.courseId, args.userEmail, args.creditCardNumber,resultHandler);
      }
    }

  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findCourseById_args implements org.apache.thrift.TBase<findCourseById_args, findCourseById_args._Fields>, java.io.Serializable, Cloneable, Comparable<findCourseById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCourseById_args");

    private static final org.apache.thrift.protocol.TField COURSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCourseById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCourseById_argsTupleSchemeFactory();

    public long courseId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_ID((short)1, "courseId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_ID
            return COURSE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COURSEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCourseById_args.class, metaDataMap);
    }

    public findCourseById_args() {
    }

    public findCourseById_args(
      long courseId)
    {
      this();
      this.courseId = courseId;
      setCourseIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCourseById_args(findCourseById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.courseId = other.courseId;
    }

    @Override
    public findCourseById_args deepCopy() {
      return new findCourseById_args(this);
    }

    @Override
    public void clear() {
      setCourseIdIsSet(false);
      this.courseId = 0;
    }

    public long getCourseId() {
      return this.courseId;
    }

    public findCourseById_args setCourseId(long courseId) {
      this.courseId = courseId;
      setCourseIdIsSet(true);
      return this;
    }

    public void unsetCourseId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    /** Returns true if field courseId is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    public void setCourseIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COURSEID_ISSET_ID, value);
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COURSE_ID:
        if (value == null) {
          unsetCourseId();
        } else {
          setCourseId((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_ID:
        return getCourseId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COURSE_ID:
        return isSetCourseId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findCourseById_args)
        return this.equals((findCourseById_args)that);
      return false;
    }

    public boolean equals(findCourseById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_courseId = true;
      boolean that_present_courseId = true;
      if (this_present_courseId || that_present_courseId) {
        if (!(this_present_courseId && that_present_courseId))
          return false;
        if (this.courseId != that.courseId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(courseId);

      return hashCode;
    }

    @Override
    public int compareTo(findCourseById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCourseId(), other.isSetCourseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseId, other.courseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCourseById_args(");
      boolean first = true;

      sb.append("courseId:");
      sb.append(this.courseId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCourseById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourseById_argsStandardScheme getScheme() {
        return new findCourseById_argsStandardScheme();
      }
    }

    private static class findCourseById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCourseById_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findCourseById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.courseId = iprot.readI64();
                struct.setCourseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findCourseById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COURSE_ID_FIELD_DESC);
        oprot.writeI64(struct.courseId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCourseById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourseById_argsTupleScheme getScheme() {
        return new findCourseById_argsTupleScheme();
      }
    }

    private static class findCourseById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCourseById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCourseById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCourseId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCourseId()) {
          oprot.writeI64(struct.courseId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCourseById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.courseId = iprot.readI64();
          struct.setCourseIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class findCourseById_result implements org.apache.thrift.TBase<findCourseById_result, findCourseById_result._Fields>, java.io.Serializable, Cloneable, Comparable<findCourseById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findCourseById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new findCourseById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new findCourseById_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable ThriftCourseDto success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e1; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftCourseDto.class)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInstanceNotFoundException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findCourseById_result.class, metaDataMap);
    }

    public findCourseById_result() {
    }

    public findCourseById_result(
      ThriftCourseDto success,
      ThriftInstanceNotFoundException e1)
    {
      this();
      this.success = success;
      this.e1 = e1;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findCourseById_result(findCourseById_result other) {
      if (other.isSetSuccess()) {
        this.success = new ThriftCourseDto(other.success);
      }
      if (other.isSetE1()) {
        this.e1 = new ThriftInstanceNotFoundException(other.e1);
      }
    }

    @Override
    public findCourseById_result deepCopy() {
      return new findCourseById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e1 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftCourseDto getSuccess() {
      return this.success;
    }

    public findCourseById_result setSuccess(@org.apache.thrift.annotation.Nullable ThriftCourseDto success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInstanceNotFoundException getE1() {
      return this.e1;
    }

    public findCourseById_result setE1(@org.apache.thrift.annotation.Nullable ThriftInstanceNotFoundException e1) {
      this.e1 = e1;
      return this;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ThriftCourseDto)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((ThriftInstanceNotFoundException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof findCourseById_result)
        return this.equals((findCourseById_result)that);
      return false;
    }

    public boolean equals(findCourseById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(findCourseById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE1(), other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("findCourseById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findCourseById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourseById_resultStandardScheme getScheme() {
        return new findCourseById_resultStandardScheme();
      }
    }

    private static class findCourseById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<findCourseById_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, findCourseById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ThriftCourseDto();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new ThriftInstanceNotFoundException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, findCourseById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findCourseById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public findCourseById_resultTupleScheme getScheme() {
        return new findCourseById_resultTupleScheme();
      }
    }

    private static class findCourseById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<findCourseById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findCourseById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findCourseById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ThriftCourseDto();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new ThriftInstanceNotFoundException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class enrollInCourse_args implements org.apache.thrift.TBase<enrollInCourse_args, enrollInCourse_args._Fields>, java.io.Serializable, Cloneable, Comparable<enrollInCourse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enrollInCourse_args");

    private static final org.apache.thrift.protocol.TField COURSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("courseId", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmail", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CREDIT_CARD_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("creditCardNumber", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enrollInCourse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enrollInCourse_argsTupleSchemeFactory();

    public long courseId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String userEmail; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String creditCardNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COURSE_ID((short)1, "courseId"),
      USER_EMAIL((short)2, "userEmail"),
      CREDIT_CARD_NUMBER((short)3, "creditCardNumber");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COURSE_ID
            return COURSE_ID;
          case 2: // USER_EMAIL
            return USER_EMAIL;
          case 3: // CREDIT_CARD_NUMBER
            return CREDIT_CARD_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __COURSEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COURSE_ID, new org.apache.thrift.meta_data.FieldMetaData("courseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("userEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CREDIT_CARD_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("creditCardNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enrollInCourse_args.class, metaDataMap);
    }

    public enrollInCourse_args() {
    }

    public enrollInCourse_args(
      long courseId,
      java.lang.String userEmail,
      java.lang.String creditCardNumber)
    {
      this();
      this.courseId = courseId;
      setCourseIdIsSet(true);
      this.userEmail = userEmail;
      this.creditCardNumber = creditCardNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enrollInCourse_args(enrollInCourse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.courseId = other.courseId;
      if (other.isSetUserEmail()) {
        this.userEmail = other.userEmail;
      }
      if (other.isSetCreditCardNumber()) {
        this.creditCardNumber = other.creditCardNumber;
      }
    }

    @Override
    public enrollInCourse_args deepCopy() {
      return new enrollInCourse_args(this);
    }

    @Override
    public void clear() {
      setCourseIdIsSet(false);
      this.courseId = 0;
      this.userEmail = null;
      this.creditCardNumber = null;
    }

    public long getCourseId() {
      return this.courseId;
    }

    public enrollInCourse_args setCourseId(long courseId) {
      this.courseId = courseId;
      setCourseIdIsSet(true);
      return this;
    }

    public void unsetCourseId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    /** Returns true if field courseId is set (has been assigned a value) and false otherwise */
    public boolean isSetCourseId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COURSEID_ISSET_ID);
    }

    public void setCourseIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COURSEID_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getUserEmail() {
      return this.userEmail;
    }

    public enrollInCourse_args setUserEmail(@org.apache.thrift.annotation.Nullable java.lang.String userEmail) {
      this.userEmail = userEmail;
      return this;
    }

    public void unsetUserEmail() {
      this.userEmail = null;
    }

    /** Returns true if field userEmail is set (has been assigned a value) and false otherwise */
    public boolean isSetUserEmail() {
      return this.userEmail != null;
    }

    public void setUserEmailIsSet(boolean value) {
      if (!value) {
        this.userEmail = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCreditCardNumber() {
      return this.creditCardNumber;
    }

    public enrollInCourse_args setCreditCardNumber(@org.apache.thrift.annotation.Nullable java.lang.String creditCardNumber) {
      this.creditCardNumber = creditCardNumber;
      return this;
    }

    public void unsetCreditCardNumber() {
      this.creditCardNumber = null;
    }

    /** Returns true if field creditCardNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetCreditCardNumber() {
      return this.creditCardNumber != null;
    }

    public void setCreditCardNumberIsSet(boolean value) {
      if (!value) {
        this.creditCardNumber = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COURSE_ID:
        if (value == null) {
          unsetCourseId();
        } else {
          setCourseId((java.lang.Long)value);
        }
        break;

      case USER_EMAIL:
        if (value == null) {
          unsetUserEmail();
        } else {
          setUserEmail((java.lang.String)value);
        }
        break;

      case CREDIT_CARD_NUMBER:
        if (value == null) {
          unsetCreditCardNumber();
        } else {
          setCreditCardNumber((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COURSE_ID:
        return getCourseId();

      case USER_EMAIL:
        return getUserEmail();

      case CREDIT_CARD_NUMBER:
        return getCreditCardNumber();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COURSE_ID:
        return isSetCourseId();
      case USER_EMAIL:
        return isSetUserEmail();
      case CREDIT_CARD_NUMBER:
        return isSetCreditCardNumber();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof enrollInCourse_args)
        return this.equals((enrollInCourse_args)that);
      return false;
    }

    public boolean equals(enrollInCourse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_courseId = true;
      boolean that_present_courseId = true;
      if (this_present_courseId || that_present_courseId) {
        if (!(this_present_courseId && that_present_courseId))
          return false;
        if (this.courseId != that.courseId)
          return false;
      }

      boolean this_present_userEmail = true && this.isSetUserEmail();
      boolean that_present_userEmail = true && that.isSetUserEmail();
      if (this_present_userEmail || that_present_userEmail) {
        if (!(this_present_userEmail && that_present_userEmail))
          return false;
        if (!this.userEmail.equals(that.userEmail))
          return false;
      }

      boolean this_present_creditCardNumber = true && this.isSetCreditCardNumber();
      boolean that_present_creditCardNumber = true && that.isSetCreditCardNumber();
      if (this_present_creditCardNumber || that_present_creditCardNumber) {
        if (!(this_present_creditCardNumber && that_present_creditCardNumber))
          return false;
        if (!this.creditCardNumber.equals(that.creditCardNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(courseId);

      hashCode = hashCode * 8191 + ((isSetUserEmail()) ? 131071 : 524287);
      if (isSetUserEmail())
        hashCode = hashCode * 8191 + userEmail.hashCode();

      hashCode = hashCode * 8191 + ((isSetCreditCardNumber()) ? 131071 : 524287);
      if (isSetCreditCardNumber())
        hashCode = hashCode * 8191 + creditCardNumber.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(enrollInCourse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCourseId(), other.isSetCourseId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCourseId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.courseId, other.courseId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetUserEmail(), other.isSetUserEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserEmail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmail, other.userEmail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCreditCardNumber(), other.isSetCreditCardNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCreditCardNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditCardNumber, other.creditCardNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enrollInCourse_args(");
      boolean first = true;

      sb.append("courseId:");
      sb.append(this.courseId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userEmail:");
      if (this.userEmail == null) {
        sb.append("null");
      } else {
        sb.append(this.userEmail);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("creditCardNumber:");
      if (this.creditCardNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.creditCardNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enrollInCourse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public enrollInCourse_argsStandardScheme getScheme() {
        return new enrollInCourse_argsStandardScheme();
      }
    }

    private static class enrollInCourse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<enrollInCourse_args> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, enrollInCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COURSE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.courseId = iprot.readI64();
                struct.setCourseIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_EMAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userEmail = iprot.readString();
                struct.setUserEmailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CREDIT_CARD_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.creditCardNumber = iprot.readString();
                struct.setCreditCardNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, enrollInCourse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(COURSE_ID_FIELD_DESC);
        oprot.writeI64(struct.courseId);
        oprot.writeFieldEnd();
        if (struct.userEmail != null) {
          oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
          oprot.writeString(struct.userEmail);
          oprot.writeFieldEnd();
        }
        if (struct.creditCardNumber != null) {
          oprot.writeFieldBegin(CREDIT_CARD_NUMBER_FIELD_DESC);
          oprot.writeString(struct.creditCardNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enrollInCourse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public enrollInCourse_argsTupleScheme getScheme() {
        return new enrollInCourse_argsTupleScheme();
      }
    }

    private static class enrollInCourse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<enrollInCourse_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enrollInCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCourseId()) {
          optionals.set(0);
        }
        if (struct.isSetUserEmail()) {
          optionals.set(1);
        }
        if (struct.isSetCreditCardNumber()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCourseId()) {
          oprot.writeI64(struct.courseId);
        }
        if (struct.isSetUserEmail()) {
          oprot.writeString(struct.userEmail);
        }
        if (struct.isSetCreditCardNumber()) {
          oprot.writeString(struct.creditCardNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enrollInCourse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.courseId = iprot.readI64();
          struct.setCourseIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userEmail = iprot.readString();
          struct.setUserEmailIsSet(true);
        }
        if (incoming.get(2)) {
          struct.creditCardNumber = iprot.readString();
          struct.setCreditCardNumberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
  public static class enrollInCourse_result implements org.apache.thrift.TBase<enrollInCourse_result, enrollInCourse_result._Fields>, java.io.Serializable, Cloneable, Comparable<enrollInCourse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("enrollInCourse_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E1_FIELD_DESC = new org.apache.thrift.protocol.TField("e1", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField E2_FIELD_DESC = new org.apache.thrift.protocol.TField("e2", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField E3_FIELD_DESC = new org.apache.thrift.protocol.TField("e3", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField E4_FIELD_DESC = new org.apache.thrift.protocol.TField("e4", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new enrollInCourse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new enrollInCourse_resultTupleSchemeFactory();

    public long success; // required
    public @org.apache.thrift.annotation.Nullable ThriftInputValidationException e1; // required
    public @org.apache.thrift.annotation.Nullable ThriftLateCancellationException e2; // required
    public @org.apache.thrift.annotation.Nullable ThriftEnrollmentAlreadyCancelledException e3; // required
    public @org.apache.thrift.annotation.Nullable ThriftUserMismatchException e4; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E1((short)1, "e1"),
      E2((short)2, "e2"),
      E3((short)3, "e3"),
      E4((short)4, "e4");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E1
            return E1;
          case 2: // E2
            return E2;
          case 3: // E3
            return E3;
          case 4: // E4
            return E4;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      @Override
      public short getThriftFieldId() {
        return _thriftId;
      }

      @Override
      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E1, new org.apache.thrift.meta_data.FieldMetaData("e1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftInputValidationException.class)));
      tmpMap.put(_Fields.E2, new org.apache.thrift.meta_data.FieldMetaData("e2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftLateCancellationException.class)));
      tmpMap.put(_Fields.E3, new org.apache.thrift.meta_data.FieldMetaData("e3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftEnrollmentAlreadyCancelledException.class)));
      tmpMap.put(_Fields.E4, new org.apache.thrift.meta_data.FieldMetaData("e4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftUserMismatchException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(enrollInCourse_result.class, metaDataMap);
    }

    public enrollInCourse_result() {
    }

    public enrollInCourse_result(
      long success,
      ThriftInputValidationException e1,
      ThriftLateCancellationException e2,
      ThriftEnrollmentAlreadyCancelledException e3,
      ThriftUserMismatchException e4)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e1 = e1;
      this.e2 = e2;
      this.e3 = e3;
      this.e4 = e4;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public enrollInCourse_result(enrollInCourse_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE1()) {
        this.e1 = new ThriftInputValidationException(other.e1);
      }
      if (other.isSetE2()) {
        this.e2 = new ThriftLateCancellationException(other.e2);
      }
      if (other.isSetE3()) {
        this.e3 = new ThriftEnrollmentAlreadyCancelledException(other.e3);
      }
      if (other.isSetE4()) {
        this.e4 = new ThriftUserMismatchException(other.e4);
      }
    }

    @Override
    public enrollInCourse_result deepCopy() {
      return new enrollInCourse_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e1 = null;
      this.e2 = null;
      this.e3 = null;
      this.e4 = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public enrollInCourse_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftInputValidationException getE1() {
      return this.e1;
    }

    public enrollInCourse_result setE1(@org.apache.thrift.annotation.Nullable ThriftInputValidationException e1) {
      this.e1 = e1;
      return this;
    }

    public void unsetE1() {
      this.e1 = null;
    }

    /** Returns true if field e1 is set (has been assigned a value) and false otherwise */
    public boolean isSetE1() {
      return this.e1 != null;
    }

    public void setE1IsSet(boolean value) {
      if (!value) {
        this.e1 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftLateCancellationException getE2() {
      return this.e2;
    }

    public enrollInCourse_result setE2(@org.apache.thrift.annotation.Nullable ThriftLateCancellationException e2) {
      this.e2 = e2;
      return this;
    }

    public void unsetE2() {
      this.e2 = null;
    }

    /** Returns true if field e2 is set (has been assigned a value) and false otherwise */
    public boolean isSetE2() {
      return this.e2 != null;
    }

    public void setE2IsSet(boolean value) {
      if (!value) {
        this.e2 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftEnrollmentAlreadyCancelledException getE3() {
      return this.e3;
    }

    public enrollInCourse_result setE3(@org.apache.thrift.annotation.Nullable ThriftEnrollmentAlreadyCancelledException e3) {
      this.e3 = e3;
      return this;
    }

    public void unsetE3() {
      this.e3 = null;
    }

    /** Returns true if field e3 is set (has been assigned a value) and false otherwise */
    public boolean isSetE3() {
      return this.e3 != null;
    }

    public void setE3IsSet(boolean value) {
      if (!value) {
        this.e3 = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ThriftUserMismatchException getE4() {
      return this.e4;
    }

    public enrollInCourse_result setE4(@org.apache.thrift.annotation.Nullable ThriftUserMismatchException e4) {
      this.e4 = e4;
      return this;
    }

    public void unsetE4() {
      this.e4 = null;
    }

    /** Returns true if field e4 is set (has been assigned a value) and false otherwise */
    public boolean isSetE4() {
      return this.e4 != null;
    }

    public void setE4IsSet(boolean value) {
      if (!value) {
        this.e4 = null;
      }
    }

    @Override
    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case E1:
        if (value == null) {
          unsetE1();
        } else {
          setE1((ThriftInputValidationException)value);
        }
        break;

      case E2:
        if (value == null) {
          unsetE2();
        } else {
          setE2((ThriftLateCancellationException)value);
        }
        break;

      case E3:
        if (value == null) {
          unsetE3();
        } else {
          setE3((ThriftEnrollmentAlreadyCancelledException)value);
        }
        break;

      case E4:
        if (value == null) {
          unsetE4();
        } else {
          setE4((ThriftUserMismatchException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E1:
        return getE1();

      case E2:
        return getE2();

      case E3:
        return getE3();

      case E4:
        return getE4();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    @Override
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E1:
        return isSetE1();
      case E2:
        return isSetE2();
      case E3:
        return isSetE3();
      case E4:
        return isSetE4();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof enrollInCourse_result)
        return this.equals((enrollInCourse_result)that);
      return false;
    }

    public boolean equals(enrollInCourse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e1 = true && this.isSetE1();
      boolean that_present_e1 = true && that.isSetE1();
      if (this_present_e1 || that_present_e1) {
        if (!(this_present_e1 && that_present_e1))
          return false;
        if (!this.e1.equals(that.e1))
          return false;
      }

      boolean this_present_e2 = true && this.isSetE2();
      boolean that_present_e2 = true && that.isSetE2();
      if (this_present_e2 || that_present_e2) {
        if (!(this_present_e2 && that_present_e2))
          return false;
        if (!this.e2.equals(that.e2))
          return false;
      }

      boolean this_present_e3 = true && this.isSetE3();
      boolean that_present_e3 = true && that.isSetE3();
      if (this_present_e3 || that_present_e3) {
        if (!(this_present_e3 && that_present_e3))
          return false;
        if (!this.e3.equals(that.e3))
          return false;
      }

      boolean this_present_e4 = true && this.isSetE4();
      boolean that_present_e4 = true && that.isSetE4();
      if (this_present_e4 || that_present_e4) {
        if (!(this_present_e4 && that_present_e4))
          return false;
        if (!this.e4.equals(that.e4))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetE1()) ? 131071 : 524287);
      if (isSetE1())
        hashCode = hashCode * 8191 + e1.hashCode();

      hashCode = hashCode * 8191 + ((isSetE2()) ? 131071 : 524287);
      if (isSetE2())
        hashCode = hashCode * 8191 + e2.hashCode();

      hashCode = hashCode * 8191 + ((isSetE3()) ? 131071 : 524287);
      if (isSetE3())
        hashCode = hashCode * 8191 + e3.hashCode();

      hashCode = hashCode * 8191 + ((isSetE4()) ? 131071 : 524287);
      if (isSetE4())
        hashCode = hashCode * 8191 + e4.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(enrollInCourse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE1(), other.isSetE1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e1, other.e1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE2(), other.isSetE2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2, other.e2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE3(), other.isSetE3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE3()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e3, other.e3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE4(), other.isSetE4());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE4()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e4, other.e4);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    @Override
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("enrollInCourse_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e1:");
      if (this.e1 == null) {
        sb.append("null");
      } else {
        sb.append(this.e1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e2:");
      if (this.e2 == null) {
        sb.append("null");
      } else {
        sb.append(this.e2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e3:");
      if (this.e3 == null) {
        sb.append("null");
      } else {
        sb.append(this.e3);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e4:");
      if (this.e4 == null) {
        sb.append("null");
      } else {
        sb.append(this.e4);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class enrollInCourse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public enrollInCourse_resultStandardScheme getScheme() {
        return new enrollInCourse_resultStandardScheme();
      }
    }

    private static class enrollInCourse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<enrollInCourse_result> {

      @Override
      public void read(org.apache.thrift.protocol.TProtocol iprot, enrollInCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e1 = new ThriftInputValidationException();
                struct.e1.read(iprot);
                struct.setE1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // E2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e2 = new ThriftLateCancellationException();
                struct.e2.read(iprot);
                struct.setE2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // E3
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e3 = new ThriftEnrollmentAlreadyCancelledException();
                struct.e3.read(iprot);
                struct.setE3IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // E4
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e4 = new ThriftUserMismatchException();
                struct.e4.read(iprot);
                struct.setE4IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      @Override
      public void write(org.apache.thrift.protocol.TProtocol oprot, enrollInCourse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e1 != null) {
          oprot.writeFieldBegin(E1_FIELD_DESC);
          struct.e1.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e2 != null) {
          oprot.writeFieldBegin(E2_FIELD_DESC);
          struct.e2.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e3 != null) {
          oprot.writeFieldBegin(E3_FIELD_DESC);
          struct.e3.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e4 != null) {
          oprot.writeFieldBegin(E4_FIELD_DESC);
          struct.e4.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class enrollInCourse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      @Override
      public enrollInCourse_resultTupleScheme getScheme() {
        return new enrollInCourse_resultTupleScheme();
      }
    }

    private static class enrollInCourse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<enrollInCourse_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, enrollInCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE1()) {
          optionals.set(1);
        }
        if (struct.isSetE2()) {
          optionals.set(2);
        }
        if (struct.isSetE3()) {
          optionals.set(3);
        }
        if (struct.isSetE4()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE1()) {
          struct.e1.write(oprot);
        }
        if (struct.isSetE2()) {
          struct.e2.write(oprot);
        }
        if (struct.isSetE3()) {
          struct.e3.write(oprot);
        }
        if (struct.isSetE4()) {
          struct.e4.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, enrollInCourse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e1 = new ThriftInputValidationException();
          struct.e1.read(iprot);
          struct.setE1IsSet(true);
        }
        if (incoming.get(2)) {
          struct.e2 = new ThriftLateCancellationException();
          struct.e2.read(iprot);
          struct.setE2IsSet(true);
        }
        if (incoming.get(3)) {
          struct.e3 = new ThriftEnrollmentAlreadyCancelledException();
          struct.e3.read(iprot);
          struct.setE3IsSet(true);
        }
        if (incoming.get(4)) {
          struct.e4 = new ThriftUserMismatchException();
          struct.e4.read(iprot);
          struct.setE4IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
